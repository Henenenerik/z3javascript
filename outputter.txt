Solver {
(declare-fun TestC0 () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 4| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "hello")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "hello")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |0 Fill 2| "" "" |0 Fill 1| |0 Fill 3|)))))
(assert (str.in.re |0 Fill 1| (str.to.re "hello")))
(assert (str.in.re (str.++ "" "" |0 Fill 1|) (str.to.re "hello")))
(assert (= |0 Fill 4| (str.++ "" "" |0 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 4| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  ((_ re.loop 3 3) (re.range "0" "9"))
                  (re.* (re.range "0" "9"))
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             ((_ re.loop 3 3) (re.range "0" "9"))
                             (re.* (re.range "0" "9"))
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |1 Fill 2| "" "" |1 Fill 1| |1 Fill 3|)))))
(assert (str.in.re |1 Fill 1|
           (re.++ ((_ re.loop 3 3) (re.range "0" "9"))
                  (re.* (re.range "0" "9")))))
(assert (str.in.re (str.++ "" "" |1 Fill 1|)
           (re.++ ((_ re.loop 3 3) (re.range "0" "9"))
                  (re.* (re.range "0" "9")))))
(assert (= |1 Fill 4| (str.++ "" "" |1 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |2 Fill 5| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 4| () String)
(declare-fun |2 Fill 6| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (re.range "0" "9")
                  (str.to.re "{undefined")
                  (str.to.re "}")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (re.range "0" "9")
                             (str.to.re "{undefined")
                             (str.to.re "}")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1
      (= TestC0
         (str.++ |2 Fill 4| "" "" |2 Fill 1| |2 Fill 2| |2 Fill 3| |2 Fill 5|)))))
(assert (str.in.re |2 Fill 1| (re.range "0" "9")))
(assert (str.in.re |2 Fill 2| (str.to.re "{undefined")))
(assert (str.in.re |2 Fill 3| (str.to.re "}")))
(assert (str.in.re (str.++ "" "" |2 Fill 1| |2 Fill 2| |2 Fill 3|)
           (re.++ (re.range "0" "9") (str.to.re "{undefined") (str.to.re "}"))))
(assert (= |2 Fill 6| (str.++ "" "" |2 Fill 1| |2 Fill 2| |2 Fill 3|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |3 Fill 3| () String)
(declare-fun |3 Fill 1| () String)
(declare-fun |3 Fill 2| () String)
(declare-fun |3 Fill 4| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  ((_ re.loop 5 5) (re.range "0" "9"))
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             ((_ re.loop 5 5) (re.range "0" "9"))
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |3 Fill 2| "" "" |3 Fill 1| |3 Fill 3|)))))
(assert (str.in.re |3 Fill 1| ((_ re.loop 5 5) (re.range "0" "9"))))
(assert (str.in.re (str.++ "" "" |3 Fill 1|) ((_ re.loop 5 5) (re.range "0" "9"))))
(assert (= |3 Fill 4| (str.++ "" "" |3 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |4 Fill 3| () String)
(declare-fun |4 Fill 1| () String)
(declare-fun |4 Fill 2| () String)
(declare-fun |4 Fill 4| () String)
(assert (let ((a!1 (re.complement (re.++ (str.to.re "hi")
                                 (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     a!1)))
(let ((a!3 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!2))))
  (str.in.re TestC0 a!3)))))
(assert (let ((a!1 (re.complement (re.++ (str.to.re "hi")
                                 (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     a!1)))
(let ((a!3 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!2))))
  (=> (str.in.re TestC0 a!3)
      (= TestC0 (str.++ |4 Fill 2| "" "" |4 Fill 1| |4 Fill 3|)))))))
(assert (str.in.re |4 Fill 1| (str.to.re "hello")))
(assert (str.in.re (str.++ "" "" |4 Fill 1|) (str.to.re "hello")))
(assert (= |4 Fill 4| (str.++ "" "" |4 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |8 Fill 3| () String)
(declare-fun |8 Fill 1| () String)
(declare-fun |8 Fill 2| () String)
(declare-fun |8 Fill 4| () String)
(assert (let ((a!1 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (str.in.re TestC0 a!2))))
(assert (let ((a!1 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (=> (str.in.re TestC0 a!2)
      (= TestC0 (str.++ |8 Fill 2| "" "" |8 Fill 1| |8 Fill 3|))))))
(assert (str.in.re |8 Fill 1| (str.to.re "hello")))
(assert (str.in.re (str.++ "" "" |8 Fill 1|) (str.to.re "hello")))
(assert (= |8 Fill 4| (str.++ "" "" |8 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |12 Fill 3| () String)
(declare-fun |12 Fill 1| () String)
(declare-fun |12 Fill 2| () String)
(declare-fun |12 Fill 4| () String)
(assert (let ((a!1 (re.inter (re.++ (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.union (str.to.re "1")
                                      (str.to.re "2")
                                      (str.to.re "3")
                                      (str.to.re "4")
                                      (str.to.re "5"))
                            (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (str.in.re TestC0 a!2))))
(assert (let ((a!1 (re.inter (re.++ (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.union (str.to.re "1")
                                      (str.to.re "2")
                                      (str.to.re "3")
                                      (str.to.re "4")
                                      (str.to.re "5"))
                            (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (=> (str.in.re TestC0 a!2)
      (= TestC0 (str.++ |12 Fill 2| "" "" |12 Fill 1| |12 Fill 3|))))))
(assert (str.in.re |12 Fill 1|
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (str.in.re (str.++ "" "" |12 Fill 1|)
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (= |12 Fill 4| (str.++ "" "" |12 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |16 Fill 7| () String)
(declare-fun |16 Fill 5| () String)
(declare-fun |16 Fill 6| () String)
(declare-fun |16 Fill 1| () String)
(declare-fun |16 Fill 2| () String)
(declare-fun |16 Fill 3| () String)
(declare-fun |16 Fill 4| () String)
(declare-fun |16 Fill 8| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (re.union (str.to.re "webkit")
                            (str.to.re "android")
                            (str.to.re "google"))
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (re.union (str.to.re "webkit")
                                       (str.to.re "android")
                                       (str.to.re "google"))
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |16 Fill 6| |16 Fill 5| |16 Fill 7|)))))
(assert (str.in.re |16 Fill 1| (str.to.re "webkit")))
(assert (str.in.re |16 Fill 2| (str.to.re "android")))
(assert (str.in.re |16 Fill 3| (str.to.re "google")))
(assert (=> (= |16 Fill 4| (str.++ "" "" |16 Fill 2|)) and))
(assert (=> (= |16 Fill 4| (str.++ "" "" "" |16 Fill 3|)) and))
(assert (or (= |16 Fill 4| (str.++ "" "" |16 Fill 2|))
    (= |16 Fill 4| (str.++ "" "" "" |16 Fill 3|))))
(assert (=> (= |16 Fill 5| (str.++ "" "" |16 Fill 1|)) and))
(assert (=> (= |16 Fill 5| (str.++ "" |16 Fill 4|)) and))
(assert (or (= |16 Fill 5| (str.++ "" "" |16 Fill 1|))
    (= |16 Fill 5| (str.++ "" |16 Fill 4|))))
(assert (str.in.re |16 Fill 5|
           (re.union (str.to.re "webkit")
                     (str.to.re "android")
                     (str.to.re "google"))))
(assert (= |16 Fill 8| |16 Fill 5|))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |17 Fill 4| () String)
(declare-fun |17 Fill 2| () String)
(declare-fun |17 Fill 1| () String)
(declare-fun |17 Fill 3| () String)
(declare-fun |17 Fill 5| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (re.opt (str.to.re "webkit"))
                  (str.to.re "google")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (re.opt (str.to.re "webkit"))
                             (str.to.re "google")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1
      (= TestC0
         (str.++ |17 Fill 3| "" "" "" |17 Fill 1| |17 Fill 2| |17 Fill 4|)))))
(assert (str.in.re |17 Fill 1| (str.to.re "webkit")))
(assert (str.in.re |17 Fill 2| (str.to.re "google")))
(assert (str.in.re (str.++ "" "" "" |17 Fill 1| |17 Fill 2|)
           (re.++ (re.opt (str.to.re "webkit")) (str.to.re "google"))))
(assert (= |17 Fill 5| (str.++ "" "" "" |17 Fill 1| |17 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |18 Fill 2| () String)
(declare-fun |18 Fill 1| () String)
(declare-fun |18 Fill 3| () String)
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re ""))))))
  (str.in.re TestC0 (re.inter (re.++ (str.to.re "") (str.to.re "Giggles")) a!6))))))
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re ""))))))
(let ((a!7 (str.in.re TestC0
                      (re.inter (re.++ (str.to.re "") (str.to.re "Giggles"))
                                a!6))))
  (=> a!7 (= TestC0 (str.++ "" "" |18 Fill 1| |18 Fill 2|))))))))
(assert (str.in.re |18 Fill 1| (str.to.re "")))
(assert (str.in.re |18 Fill 2| (str.to.re "Giggles")))
(assert (str.in.re (str.++ "" "" |18 Fill 1| |18 Fill 2|)
           (re.++ (str.to.re "") (str.to.re "Giggles"))))
(assert (= |18 Fill 3| (str.++ "" "" |18 Fill 1| |18 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |21 Fill 2| () String)
(declare-fun |21 Fill 1| () String)
(declare-fun |21 Fill 3| () String)
(declare-fun |21 Fill 4| () String)
(declare-fun |21 Fill 5| () String)
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "Hello")
                  (str.to.re "Hello"))))
  (str.in.re TestC0 a!1)))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "Hello")
                  (str.to.re "Hello"))))
  (=> (str.in.re TestC0 a!1)
      (= TestC0
         (str.++ ""
                 ""
                 (str.++ "" "" |21 Fill 1|)
                 (str.++ "" "" |21 Fill 1|)
                 (str.++ "" "" |21 Fill 2|)
                 (str.++ "" "" |21 Fill 2|))))))
(assert (str.in.re |21 Fill 1|
           (re.* (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re (str.++ "" "" |21 Fill 1|)
           (re.* (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re |21 Fill 2| (str.to.re "Hello")))
(assert (str.in.re (str.++ "" "" |21 Fill 2|) (str.to.re "Hello")))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "Hello")
                  (str.to.re "Hello"))))
  (str.in.re (str.++ ""
                     ""
                     (str.++ "" "" |21 Fill 1|)
                     (str.++ "" "" |21 Fill 1|)
                     (str.++ "" "" |21 Fill 2|)
                     (str.++ "" "" |21 Fill 2|))
             a!1)))
(assert (= |21 Fill 3|
   (str.++ ""
           ""
           (str.++ "" "" |21 Fill 1|)
           (str.++ "" "" |21 Fill 1|)
           (str.++ "" "" |21 Fill 2|)
           (str.++ "" "" |21 Fill 2|))))
(assert (= |21 Fill 4| (str.++ "" "" |21 Fill 1|)))
(assert (= |21 Fill 5| (str.++ "" "" |21 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |22 Fill 1| () String)
(declare-fun |22 Fill 2| () String)
(declare-fun |22 Fill 3| () String)
(assert (let ((a!1 (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
  (str.in.re TestC0 (re.++ a!1 a!1))))
(assert (let ((a!1 (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
  (=> (str.in.re TestC0 (re.++ a!1 a!1))
      (= TestC0
         (str.++ "" "" (str.++ "" "" |22 Fill 1|) (str.++ "" "" |22 Fill 1|))))))
(assert (str.in.re |22 Fill 1|
           (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
(assert (str.in.re (str.++ "" "" |22 Fill 1|)
           (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
(assert (let ((a!1 (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
  (str.in.re (str.++ ""
                     ""
                     (str.++ "" "" |22 Fill 1|)
                     (str.++ "" "" |22 Fill 1|))
             (re.++ a!1 a!1))))
(assert (= |22 Fill 2|
   (str.++ "" "" (str.++ "" "" |22 Fill 1|) (str.++ "" "" |22 Fill 1|))))
(assert (= |22 Fill 3| (str.++ "" "" |22 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |23 Fill 4| () String)
(declare-fun |23 Fill 3| () String)
(declare-fun |23 Fill 2| () String)
(declare-fun |23 Fill 1| () String)
(declare-fun |23 Fill 5| () String)
(assert (let ((a!1 (re.++ (str.to.re "Hello")
                  (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
      (a!2 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!3 (re.inter a!1
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!2))))
      (a!4 (re.inter (str.to.re "World")
                     (re.++ a!2 (re.* (re.range "\x00" "\xff")))))
      (a!5 (re.inter a!1 (re.++ (re.* (re.range "\x00" "\xff")) a!2)))
      (a!6 (re.inter (str.to.re "World")
                     (re.++ (re.complement a!2) (re.* (re.range "\x00" "\xff"))))))
(let ((a!7 (re.union (re.++ (re.union a!3 (str.to.re "")) a!4)
                     (re.++ a!5 (re.union a!6 (str.to.re ""))))))
  (str.in.re TestC0
             (re.inter (re.++ a!1 (str.to.re "") (str.to.re "World")) a!7))))))
(assert (let ((a!1 (re.++ (str.to.re "Hello")
                  (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
      (a!2 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!3 (re.inter a!1
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!2))))
      (a!4 (re.inter (str.to.re "World")
                     (re.++ a!2 (re.* (re.range "\x00" "\xff")))))
      (a!5 (re.inter a!1 (re.++ (re.* (re.range "\x00" "\xff")) a!2)))
      (a!6 (re.inter (str.to.re "World")
                     (re.++ (re.complement a!2) (re.* (re.range "\x00" "\xff"))))))
(let ((a!7 (re.union (re.++ (re.union a!3 (str.to.re "")) a!4)
                     (re.++ a!5 (re.union a!6 (str.to.re ""))))))
(let ((a!8 (str.in.re TestC0
                      (re.inter (re.++ a!1 (str.to.re "") (str.to.re "World"))
                                a!7))))
  (=> a!8
      (= TestC0 (str.++ "" "" |23 Fill 1| |23 Fill 2| |23 Fill 3| |23 Fill 4|))))))))
(assert (str.in.re |23 Fill 1| (str.to.re "Hello")))
(assert (str.in.re |23 Fill 2|
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (str.in.re |23 Fill 3| (str.to.re "")))
(assert (str.in.re |23 Fill 4| (str.to.re "World")))
(assert (str.in.re (str.++ "" "" |23 Fill 1| |23 Fill 2| |23 Fill 3| |23 Fill 4|)
           (re.++ (str.to.re "Hello")
                  (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))
                  (str.to.re "")
                  (str.to.re "World"))))
(assert (= |23 Fill 5| (str.++ "" "" |23 Fill 1| |23 Fill 2| |23 Fill 3| |23 Fill 4|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |26 Fill 6| () String)
(declare-fun |26 Fill 2| () String)
(declare-fun |26 Fill 5| () String)
(declare-fun |26 Fill 4| () String)
(declare-fun |26 Fill 3| () String)
(declare-fun |26 Fill 1| () String)
(declare-fun |26 Fill 7| () String)
(declare-fun |26 Fill 8| () String)
(assert (let ((a!1 (re.++ (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">"))))
  (str.in.re TestC0 a!1)))
(assert (let ((a!1 (re.++ (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">"))))
  (=> (str.in.re TestC0 a!1)
      (= TestC0
         (str.++ ""
                 ""
                 |26 Fill 1|
                 (str.++ "" "" |26 Fill 2|)
                 |26 Fill 3|
                 |26 Fill 4|
                 |26 Fill 5|
                 (str.++ "" "" |26 Fill 2|)
                 |26 Fill 6|)))))
(assert (str.in.re |26 Fill 1| (str.to.re "<")))
(assert (str.in.re |26 Fill 2|
           (re.+ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re (str.++ "" "" |26 Fill 2|)
           (re.+ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re |26 Fill 3| (str.to.re ">")))
(assert (str.in.re |26 Fill 4|
           (re.+ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re |26 Fill 5| (str.to.re "<")))
(assert (str.in.re |26 Fill 6| (str.to.re ">")))
(assert (let ((a!1 (re.++ (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">"))))
  (str.in.re (str.++ ""
                     ""
                     |26 Fill 1|
                     (str.++ "" "" |26 Fill 2|)
                     |26 Fill 3|
                     |26 Fill 4|
                     |26 Fill 5|
                     (str.++ "" "" |26 Fill 2|)
                     |26 Fill 6|)
             a!1)))
(assert (= |26 Fill 7|
   (str.++ ""
           ""
           |26 Fill 1|
           (str.++ "" "" |26 Fill 2|)
           |26 Fill 3|
           |26 Fill 4|
           |26 Fill 5|
           (str.++ "" "" |26 Fill 2|)
           |26 Fill 6|)))
(assert (= |26 Fill 8| (str.++ "" "" |26 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |27 Fill 3| () String)
(declare-fun |27 Fill 1| () String)
(declare-fun |27 Fill 2| () String)
(declare-fun |27 Fill 4| () String)
(declare-fun |27 Fill 5| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "Capture")
                  (str.to.re "Capture")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "Capture")
                             (str.to.re "Capture")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1
      (= TestC0
         (str.++ |27 Fill 2|
                 ""
                 ""
                 (str.++ "" "" |27 Fill 1|)
                 (str.++ "" "" |27 Fill 1|)
                 |27 Fill 3|)))))
(assert (str.in.re |27 Fill 1| (str.to.re "Capture")))
(assert (str.in.re (str.++ "" "" |27 Fill 1|) (str.to.re "Capture")))
(assert (str.in.re (str.++ "" "" (str.++ "" "" |27 Fill 1|) (str.++ "" "" |27 Fill 1|))
           (re.++ (str.to.re "Capture") (str.to.re "Capture"))))
(assert (= |27 Fill 4|
   (str.++ "" "" (str.++ "" "" |27 Fill 1|) (str.++ "" "" |27 Fill 1|))))
(assert (= |27 Fill 5| (str.++ "" "" |27 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |28 Fill 3| () String)
(declare-fun |28 Fill 2| () String)
(declare-fun |28 Fill 1| () String)
(declare-fun |28 Fill 4| () String)
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff")))))
      (a!7 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!8 (re.inter (str.to.re "") (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!9 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!10 (re.inter (str.to.re "")
                      (re.++ (re.complement a!1)
                             (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re "")))))
      (a!11 (re.union (re.++ (re.union a!7 (str.to.re "")) a!8)
                      (re.++ a!9 (re.union a!10 (str.to.re ""))))))
  (str.in.re TestC0
             (re.inter (re.++ (str.to.re "")
                              (str.to.re "Giggles")
                              (str.to.re ""))
                       a!6
                       a!11))))))
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff")))))
      (a!7 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!8 (re.inter (str.to.re "") (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!9 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!10 (re.inter (str.to.re "")
                      (re.++ (re.complement a!1)
                             (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re "")))))
      (a!11 (re.union (re.++ (re.union a!7 (str.to.re "")) a!8)
                      (re.++ a!9 (re.union a!10 (str.to.re ""))))))
(let ((a!12 (str.in.re TestC0
                       (re.inter (re.++ (str.to.re "")
                                        (str.to.re "Giggles")
                                        (str.to.re ""))
                                 a!6
                                 a!11))))
  (=> a!12 (= TestC0 (str.++ "" "" |28 Fill 1| |28 Fill 2| |28 Fill 3|))))))))
(assert (str.in.re |28 Fill 1| (str.to.re "")))
(assert (str.in.re |28 Fill 2| (str.to.re "Giggles")))
(assert (str.in.re |28 Fill 3| (str.to.re "")))
(assert (str.in.re (str.++ "" "" |28 Fill 1| |28 Fill 2| |28 Fill 3|)
           (re.++ (str.to.re "") (str.to.re "Giggles") (str.to.re ""))))
(assert (= |28 Fill 4| (str.++ "" "" |28 Fill 1| |28 Fill 2| |28 Fill 3|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |33 Fill 5| () String)
(declare-fun |33 Fill 4| () String)
(declare-fun |33 Fill 2| () String)
(declare-fun |33 Fill 3| () String)
(declare-fun |33 Fill 1| () String)
(declare-fun |33 Fill 6| () String)
(declare-fun |33 Fill 7| () String)
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "safari")
                  (re.* (re.range "\x00" "\xff"))))
      (a!2 (re.complement (re.++ (re.union (str.to.re "chrome")
                                           (str.to.re "android"))
                                 (re.* (re.range "\x00" "\xff"))))))
  (str.in.re TestC0 (re.inter a!1 (re.++ (str.to.re "") (re.inter a!1 a!2))))))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "safari")
                  (re.* (re.range "\x00" "\xff"))))
      (a!2 (re.complement (re.++ (re.union (str.to.re "chrome")
                                           (str.to.re "android"))
                                 (re.* (re.range "\x00" "\xff"))))))
(let ((a!3 (str.in.re TestC0
                      (re.inter a!1 (re.++ (str.to.re "") (re.inter a!1 a!2))))))
  (=> a!3
      (= TestC0 (str.++ "" "" |33 Fill 3| |33 Fill 2| |33 Fill 4| |33 Fill 5|))))))
(assert (str.in.re |33 Fill 1|
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (str.in.re (str.++ "" "" |33 Fill 1|)
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (or (= |33 Fill 2| (str.++ "" "" |33 Fill 1|)) (= |33 Fill 2| "")))
(assert (=> (= |33 Fill 2| "") (= (str.++ |33 Fill 3| |33 Fill 2|) "")))
(assert (str.in.re |33 Fill 4| (str.to.re "safari")))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "safari"))))
  (str.in.re (str.++ "" "" |33 Fill 3| |33 Fill 2| |33 Fill 4|) a!1)))
(assert (= |33 Fill 6| (str.++ "" "" |33 Fill 3| |33 Fill 2| |33 Fill 4|)))
(assert (= |33 Fill 7| |33 Fill 2|))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 4| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "hello")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "hello")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |0 Fill 2| "" "" |0 Fill 1| |0 Fill 3|)))))
(assert (str.in.re |0 Fill 1| (str.to.re "hello")))
(assert (str.in.re (str.++ "" "" |0 Fill 1|) (str.to.re "hello")))
(assert (= |0 Fill 4| (str.++ "" "" |0 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |1 Fill 3| () String)
(declare-fun |1 Fill 1| () String)
(declare-fun |1 Fill 2| () String)
(declare-fun |1 Fill 4| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  ((_ re.loop 3 3) (re.range "0" "9"))
                  (re.* (re.range "0" "9"))
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             ((_ re.loop 3 3) (re.range "0" "9"))
                             (re.* (re.range "0" "9"))
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |1 Fill 2| "" "" |1 Fill 1| |1 Fill 3|)))))
(assert (str.in.re |1 Fill 1|
           (re.++ ((_ re.loop 3 3) (re.range "0" "9"))
                  (re.* (re.range "0" "9")))))
(assert (str.in.re (str.++ "" "" |1 Fill 1|)
           (re.++ ((_ re.loop 3 3) (re.range "0" "9"))
                  (re.* (re.range "0" "9")))))
(assert (= |1 Fill 4| (str.++ "" "" |1 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |2 Fill 5| () String)
(declare-fun |2 Fill 3| () String)
(declare-fun |2 Fill 2| () String)
(declare-fun |2 Fill 1| () String)
(declare-fun |2 Fill 4| () String)
(declare-fun |2 Fill 6| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (re.range "0" "9")
                  (str.to.re "{undefined")
                  (str.to.re "}")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (re.range "0" "9")
                             (str.to.re "{undefined")
                             (str.to.re "}")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1
      (= TestC0
         (str.++ |2 Fill 4| "" "" |2 Fill 1| |2 Fill 2| |2 Fill 3| |2 Fill 5|)))))
(assert (str.in.re |2 Fill 1| (re.range "0" "9")))
(assert (str.in.re |2 Fill 2| (str.to.re "{undefined")))
(assert (str.in.re |2 Fill 3| (str.to.re "}")))
(assert (str.in.re (str.++ "" "" |2 Fill 1| |2 Fill 2| |2 Fill 3|)
           (re.++ (re.range "0" "9") (str.to.re "{undefined") (str.to.re "}"))))
(assert (= |2 Fill 6| (str.++ "" "" |2 Fill 1| |2 Fill 2| |2 Fill 3|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |3 Fill 3| () String)
(declare-fun |3 Fill 1| () String)
(declare-fun |3 Fill 2| () String)
(declare-fun |3 Fill 4| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  ((_ re.loop 5 5) (re.range "0" "9"))
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             ((_ re.loop 5 5) (re.range "0" "9"))
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |3 Fill 2| "" "" |3 Fill 1| |3 Fill 3|)))))
(assert (str.in.re |3 Fill 1| ((_ re.loop 5 5) (re.range "0" "9"))))
(assert (str.in.re (str.++ "" "" |3 Fill 1|) ((_ re.loop 5 5) (re.range "0" "9"))))
(assert (= |3 Fill 4| (str.++ "" "" |3 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |4 Fill 3| () String)
(declare-fun |4 Fill 1| () String)
(declare-fun |4 Fill 2| () String)
(declare-fun |4 Fill 4| () String)
(assert (let ((a!1 (re.complement (re.++ (str.to.re "hi")
                                 (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     a!1)))
(let ((a!3 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!2))))
  (str.in.re TestC0 a!3)))))
(assert (let ((a!1 (re.complement (re.++ (str.to.re "hi")
                                 (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     a!1)))
(let ((a!3 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!2))))
  (=> (str.in.re TestC0 a!3)
      (= TestC0 (str.++ |4 Fill 2| "" "" |4 Fill 1| |4 Fill 3|)))))))
(assert (str.in.re |4 Fill 1| (str.to.re "hello")))
(assert (str.in.re (str.++ "" "" |4 Fill 1|) (str.to.re "hello")))
(assert (= |4 Fill 4| (str.++ "" "" |4 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |8 Fill 3| () String)
(declare-fun |8 Fill 1| () String)
(declare-fun |8 Fill 2| () String)
(declare-fun |8 Fill 4| () String)
(assert (let ((a!1 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (str.in.re TestC0 a!2))))
(assert (let ((a!1 (re.inter (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff")))
                     (re.++ (str.to.re "hello") (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (str.to.re "hello")
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (=> (str.in.re TestC0 a!2)
      (= TestC0 (str.++ |8 Fill 2| "" "" |8 Fill 1| |8 Fill 3|))))))
(assert (str.in.re |8 Fill 1| (str.to.re "hello")))
(assert (str.in.re (str.++ "" "" |8 Fill 1|) (str.to.re "hello")))
(assert (= |8 Fill 4| (str.++ "" "" |8 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |12 Fill 3| () String)
(declare-fun |12 Fill 1| () String)
(declare-fun |12 Fill 2| () String)
(declare-fun |12 Fill 4| () String)
(assert (let ((a!1 (re.inter (re.++ (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.union (str.to.re "1")
                                      (str.to.re "2")
                                      (str.to.re "3")
                                      (str.to.re "4")
                                      (str.to.re "5"))
                            (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (str.in.re TestC0 a!2))))
(assert (let ((a!1 (re.inter (re.++ (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.union (str.to.re "1")
                                      (str.to.re "2")
                                      (str.to.re "3")
                                      (str.to.re "4")
                                      (str.to.re "5"))
                            (re.* (re.range "\x00" "\xff"))))))
(let ((a!2 (re.inter (re.++ (re.* (re.range "\x00" "\xff"))
                            (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))
                            (re.* (re.range "\x00" "\xff")))
                     (re.++ (re.* (re.range "\x00" "\xff")) (str.to.re "") a!1))))
  (=> (str.in.re TestC0 a!2)
      (= TestC0 (str.++ |12 Fill 2| "" "" |12 Fill 1| |12 Fill 3|))))))
(assert (str.in.re |12 Fill 1|
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (str.in.re (str.++ "" "" |12 Fill 1|)
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (= |12 Fill 4| (str.++ "" "" |12 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |16 Fill 7| () String)
(declare-fun |16 Fill 5| () String)
(declare-fun |16 Fill 6| () String)
(declare-fun |16 Fill 1| () String)
(declare-fun |16 Fill 2| () String)
(declare-fun |16 Fill 3| () String)
(declare-fun |16 Fill 4| () String)
(declare-fun |16 Fill 8| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (re.union (str.to.re "webkit")
                            (str.to.re "android")
                            (str.to.re "google"))
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (re.union (str.to.re "webkit")
                                       (str.to.re "android")
                                       (str.to.re "google"))
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1 (= TestC0 (str.++ |16 Fill 6| |16 Fill 5| |16 Fill 7|)))))
(assert (str.in.re |16 Fill 1| (str.to.re "webkit")))
(assert (str.in.re |16 Fill 2| (str.to.re "android")))
(assert (str.in.re |16 Fill 3| (str.to.re "google")))
(assert (=> (= |16 Fill 4| (str.++ "" "" |16 Fill 2|)) and))
(assert (=> (= |16 Fill 4| (str.++ "" "" "" |16 Fill 3|)) and))
(assert (or (= |16 Fill 4| (str.++ "" "" |16 Fill 2|))
    (= |16 Fill 4| (str.++ "" "" "" |16 Fill 3|))))
(assert (=> (= |16 Fill 5| (str.++ "" "" |16 Fill 1|)) and))
(assert (=> (= |16 Fill 5| (str.++ "" |16 Fill 4|)) and))
(assert (or (= |16 Fill 5| (str.++ "" "" |16 Fill 1|))
    (= |16 Fill 5| (str.++ "" |16 Fill 4|))))
(assert (str.in.re |16 Fill 5|
           (re.union (str.to.re "webkit")
                     (str.to.re "android")
                     (str.to.re "google"))))
(assert (= |16 Fill 8| |16 Fill 5|))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |17 Fill 4| () String)
(declare-fun |17 Fill 2| () String)
(declare-fun |17 Fill 1| () String)
(declare-fun |17 Fill 3| () String)
(declare-fun |17 Fill 5| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (re.opt (str.to.re "webkit"))
                  (str.to.re "google")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (re.opt (str.to.re "webkit"))
                             (str.to.re "google")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1
      (= TestC0
         (str.++ |17 Fill 3| "" "" "" |17 Fill 1| |17 Fill 2| |17 Fill 4|)))))
(assert (str.in.re |17 Fill 1| (str.to.re "webkit")))
(assert (str.in.re |17 Fill 2| (str.to.re "google")))
(assert (str.in.re (str.++ "" "" "" |17 Fill 1| |17 Fill 2|)
           (re.++ (re.opt (str.to.re "webkit")) (str.to.re "google"))))
(assert (= |17 Fill 5| (str.++ "" "" "" |17 Fill 1| |17 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |18 Fill 2| () String)
(declare-fun |18 Fill 1| () String)
(declare-fun |18 Fill 3| () String)
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re ""))))))
  (str.in.re TestC0 (re.inter (re.++ (str.to.re "") (str.to.re "Giggles")) a!6))))))
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re ""))))))
(let ((a!7 (str.in.re TestC0
                      (re.inter (re.++ (str.to.re "") (str.to.re "Giggles"))
                                a!6))))
  (=> a!7 (= TestC0 (str.++ "" "" |18 Fill 1| |18 Fill 2|))))))))
(assert (str.in.re |18 Fill 1| (str.to.re "")))
(assert (str.in.re |18 Fill 2| (str.to.re "Giggles")))
(assert (str.in.re (str.++ "" "" |18 Fill 1| |18 Fill 2|)
           (re.++ (str.to.re "") (str.to.re "Giggles"))))
(assert (= |18 Fill 3| (str.++ "" "" |18 Fill 1| |18 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |21 Fill 2| () String)
(declare-fun |21 Fill 1| () String)
(declare-fun |21 Fill 3| () String)
(declare-fun |21 Fill 4| () String)
(declare-fun |21 Fill 5| () String)
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "Hello")
                  (str.to.re "Hello"))))
  (str.in.re TestC0 a!1)))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "Hello")
                  (str.to.re "Hello"))))
  (=> (str.in.re TestC0 a!1)
      (= TestC0
         (str.++ ""
                 ""
                 (str.++ "" "" |21 Fill 1|)
                 (str.++ "" "" |21 Fill 1|)
                 (str.++ "" "" |21 Fill 2|)
                 (str.++ "" "" |21 Fill 2|))))))
(assert (str.in.re |21 Fill 1|
           (re.* (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re (str.++ "" "" |21 Fill 1|)
           (re.* (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re |21 Fill 2| (str.to.re "Hello")))
(assert (str.in.re (str.++ "" "" |21 Fill 2|) (str.to.re "Hello")))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "Hello")
                  (str.to.re "Hello"))))
  (str.in.re (str.++ ""
                     ""
                     (str.++ "" "" |21 Fill 1|)
                     (str.++ "" "" |21 Fill 1|)
                     (str.++ "" "" |21 Fill 2|)
                     (str.++ "" "" |21 Fill 2|))
             a!1)))
(assert (= |21 Fill 3|
   (str.++ ""
           ""
           (str.++ "" "" |21 Fill 1|)
           (str.++ "" "" |21 Fill 1|)
           (str.++ "" "" |21 Fill 2|)
           (str.++ "" "" |21 Fill 2|))))
(assert (= |21 Fill 4| (str.++ "" "" |21 Fill 1|)))
(assert (= |21 Fill 5| (str.++ "" "" |21 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |22 Fill 1| () String)
(declare-fun |22 Fill 2| () String)
(declare-fun |22 Fill 3| () String)
(assert (let ((a!1 (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
  (str.in.re TestC0 (re.++ a!1 a!1))))
(assert (let ((a!1 (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
  (=> (str.in.re TestC0 (re.++ a!1 a!1))
      (= TestC0
         (str.++ "" "" (str.++ "" "" |22 Fill 1|) (str.++ "" "" |22 Fill 1|))))))
(assert (str.in.re |22 Fill 1|
           (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
(assert (str.in.re (str.++ "" "" |22 Fill 1|)
           (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
(assert (let ((a!1 (re.+ (re.union (str.to.re "1")
                           (str.to.re "2")
                           (str.to.re "3")
                           (str.to.re "4")
                           (str.to.re "5")))))
  (str.in.re (str.++ ""
                     ""
                     (str.++ "" "" |22 Fill 1|)
                     (str.++ "" "" |22 Fill 1|))
             (re.++ a!1 a!1))))
(assert (= |22 Fill 2|
   (str.++ "" "" (str.++ "" "" |22 Fill 1|) (str.++ "" "" |22 Fill 1|))))
(assert (= |22 Fill 3| (str.++ "" "" |22 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |23 Fill 4| () String)
(declare-fun |23 Fill 3| () String)
(declare-fun |23 Fill 2| () String)
(declare-fun |23 Fill 1| () String)
(declare-fun |23 Fill 5| () String)
(assert (let ((a!1 (re.++ (str.to.re "Hello")
                  (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
      (a!2 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!3 (re.inter a!1
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!2))))
      (a!4 (re.inter (str.to.re "World")
                     (re.++ a!2 (re.* (re.range "\x00" "\xff")))))
      (a!5 (re.inter a!1 (re.++ (re.* (re.range "\x00" "\xff")) a!2)))
      (a!6 (re.inter (str.to.re "World")
                     (re.++ (re.complement a!2) (re.* (re.range "\x00" "\xff"))))))
(let ((a!7 (re.union (re.++ (re.union a!3 (str.to.re "")) a!4)
                     (re.++ a!5 (re.union a!6 (str.to.re ""))))))
  (str.in.re TestC0
             (re.inter (re.++ a!1 (str.to.re "") (str.to.re "World")) a!7))))))
(assert (let ((a!1 (re.++ (str.to.re "Hello")
                  (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
      (a!2 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!3 (re.inter a!1
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!2))))
      (a!4 (re.inter (str.to.re "World")
                     (re.++ a!2 (re.* (re.range "\x00" "\xff")))))
      (a!5 (re.inter a!1 (re.++ (re.* (re.range "\x00" "\xff")) a!2)))
      (a!6 (re.inter (str.to.re "World")
                     (re.++ (re.complement a!2) (re.* (re.range "\x00" "\xff"))))))
(let ((a!7 (re.union (re.++ (re.union a!3 (str.to.re "")) a!4)
                     (re.++ a!5 (re.union a!6 (str.to.re ""))))))
(let ((a!8 (str.in.re TestC0
                      (re.inter (re.++ a!1 (str.to.re "") (str.to.re "World"))
                                a!7))))
  (=> a!8
      (= TestC0 (str.++ "" "" |23 Fill 1| |23 Fill 2| |23 Fill 3| |23 Fill 4|))))))))
(assert (str.in.re |23 Fill 1| (str.to.re "Hello")))
(assert (str.in.re |23 Fill 2|
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (str.in.re |23 Fill 3| (str.to.re "")))
(assert (str.in.re |23 Fill 4| (str.to.re "World")))
(assert (str.in.re (str.++ "" "" |23 Fill 1| |23 Fill 2| |23 Fill 3| |23 Fill 4|)
           (re.++ (str.to.re "Hello")
                  (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))
                  (str.to.re "")
                  (str.to.re "World"))))
(assert (= |23 Fill 5| (str.++ "" "" |23 Fill 1| |23 Fill 2| |23 Fill 3| |23 Fill 4|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |26 Fill 6| () String)
(declare-fun |26 Fill 2| () String)
(declare-fun |26 Fill 5| () String)
(declare-fun |26 Fill 4| () String)
(declare-fun |26 Fill 3| () String)
(declare-fun |26 Fill 1| () String)
(declare-fun |26 Fill 7| () String)
(declare-fun |26 Fill 8| () String)
(assert (let ((a!1 (re.++ (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">"))))
  (str.in.re TestC0 a!1)))
(assert (let ((a!1 (re.++ (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">"))))
  (=> (str.in.re TestC0 a!1)
      (= TestC0
         (str.++ ""
                 ""
                 |26 Fill 1|
                 (str.++ "" "" |26 Fill 2|)
                 |26 Fill 3|
                 |26 Fill 4|
                 |26 Fill 5|
                 (str.++ "" "" |26 Fill 2|)
                 |26 Fill 6|)))))
(assert (str.in.re |26 Fill 1| (str.to.re "<")))
(assert (str.in.re |26 Fill 2|
           (re.+ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re (str.++ "" "" |26 Fill 2|)
           (re.+ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re |26 Fill 3| (str.to.re ">")))
(assert (str.in.re |26 Fill 4|
           (re.+ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff")))))
(assert (str.in.re |26 Fill 5| (str.to.re "<")))
(assert (str.in.re |26 Fill 6| (str.to.re ">")))
(assert (let ((a!1 (re.++ (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "<")
                  (re.+ (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re ">"))))
  (str.in.re (str.++ ""
                     ""
                     |26 Fill 1|
                     (str.++ "" "" |26 Fill 2|)
                     |26 Fill 3|
                     |26 Fill 4|
                     |26 Fill 5|
                     (str.++ "" "" |26 Fill 2|)
                     |26 Fill 6|)
             a!1)))
(assert (= |26 Fill 7|
   (str.++ ""
           ""
           |26 Fill 1|
           (str.++ "" "" |26 Fill 2|)
           |26 Fill 3|
           |26 Fill 4|
           |26 Fill 5|
           (str.++ "" "" |26 Fill 2|)
           |26 Fill 6|)))
(assert (= |26 Fill 8| (str.++ "" "" |26 Fill 2|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |27 Fill 3| () String)
(declare-fun |27 Fill 1| () String)
(declare-fun |27 Fill 2| () String)
(declare-fun |27 Fill 4| () String)
(declare-fun |27 Fill 5| () String)
(assert (str.in.re TestC0
           (re.++ (re.* (re.range "\x00" "\xff"))
                  (str.to.re "Capture")
                  (str.to.re "Capture")
                  (re.* (re.range "\x00" "\xff")))))
(assert (let ((a!1 (str.in.re TestC0
                      (re.++ (re.* (re.range "\x00" "\xff"))
                             (str.to.re "Capture")
                             (str.to.re "Capture")
                             (re.* (re.range "\x00" "\xff"))))))
  (=> a!1
      (= TestC0
         (str.++ |27 Fill 2|
                 ""
                 ""
                 (str.++ "" "" |27 Fill 1|)
                 (str.++ "" "" |27 Fill 1|)
                 |27 Fill 3|)))))
(assert (str.in.re |27 Fill 1| (str.to.re "Capture")))
(assert (str.in.re (str.++ "" "" |27 Fill 1|) (str.to.re "Capture")))
(assert (str.in.re (str.++ "" "" (str.++ "" "" |27 Fill 1|) (str.++ "" "" |27 Fill 1|))
           (re.++ (str.to.re "Capture") (str.to.re "Capture"))))
(assert (= |27 Fill 4|
   (str.++ "" "" (str.++ "" "" |27 Fill 1|) (str.++ "" "" |27 Fill 1|))))
(assert (= |27 Fill 5| (str.++ "" "" |27 Fill 1|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |28 Fill 3| () String)
(declare-fun |28 Fill 2| () String)
(declare-fun |28 Fill 1| () String)
(declare-fun |28 Fill 4| () String)
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff")))))
      (a!7 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!8 (re.inter (str.to.re "") (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!9 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!10 (re.inter (str.to.re "")
                      (re.++ (re.complement a!1)
                             (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re "")))))
      (a!11 (re.union (re.++ (re.union a!7 (str.to.re "")) a!8)
                      (re.++ a!9 (re.union a!10 (str.to.re ""))))))
  (str.in.re TestC0
             (re.inter (re.++ (str.to.re "")
                              (str.to.re "Giggles")
                              (str.to.re ""))
                       a!6
                       a!11))))))
(assert (let ((a!1 (re.union (re.range "a" "z")
                     (re.range "A" "Z")
                     (re.range "0" "9")
                     (str.to.re "_"))))
(let ((a!2 (re.inter (str.to.re "")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!3 (re.inter (str.to.re "Giggles")
                     (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!4 (re.inter (str.to.re "") (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!5 (re.inter (str.to.re "Giggles")
                     (re.++ (re.complement a!1) (re.* (re.range "\x00" "\xff")))))
      (a!7 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) (re.complement a!1))))
      (a!8 (re.inter (str.to.re "") (re.++ a!1 (re.* (re.range "\x00" "\xff")))))
      (a!9 (re.inter (str.to.re "Giggles")
                     (re.++ (re.* (re.range "\x00" "\xff")) a!1)))
      (a!10 (re.inter (str.to.re "")
                      (re.++ (re.complement a!1)
                             (re.* (re.range "\x00" "\xff"))))))
(let ((a!6 (re.union (re.++ (re.union a!2 (str.to.re "")) a!3)
                     (re.++ a!4 (re.union a!5 (str.to.re "")))))
      (a!11 (re.union (re.++ (re.union a!7 (str.to.re "")) a!8)
                      (re.++ a!9 (re.union a!10 (str.to.re ""))))))
(let ((a!12 (str.in.re TestC0
                       (re.inter (re.++ (str.to.re "")
                                        (str.to.re "Giggles")
                                        (str.to.re ""))
                                 a!6
                                 a!11))))
  (=> a!12 (= TestC0 (str.++ "" "" |28 Fill 1| |28 Fill 2| |28 Fill 3|))))))))
(assert (str.in.re |28 Fill 1| (str.to.re "")))
(assert (str.in.re |28 Fill 2| (str.to.re "Giggles")))
(assert (str.in.re |28 Fill 3| (str.to.re "")))
(assert (str.in.re (str.++ "" "" |28 Fill 1| |28 Fill 2| |28 Fill 3|)
           (re.++ (str.to.re "") (str.to.re "Giggles") (str.to.re ""))))
(assert (= |28 Fill 4| (str.++ "" "" |28 Fill 1| |28 Fill 2| |28 Fill 3|)))
}
Solver {
(declare-fun TestC0 () String)
(declare-fun |33 Fill 5| () String)
(declare-fun |33 Fill 4| () String)
(declare-fun |33 Fill 2| () String)
(declare-fun |33 Fill 3| () String)
(declare-fun |33 Fill 1| () String)
(declare-fun |33 Fill 6| () String)
(declare-fun |33 Fill 7| () String)
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "safari")
                  (re.* (re.range "\x00" "\xff"))))
      (a!2 (re.complement (re.++ (re.union (str.to.re "chrome")
                                           (str.to.re "android"))
                                 (re.* (re.range "\x00" "\xff"))))))
  (str.in.re TestC0 (re.inter a!1 (re.++ (str.to.re "") (re.inter a!1 a!2))))))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "safari")
                  (re.* (re.range "\x00" "\xff"))))
      (a!2 (re.complement (re.++ (re.union (str.to.re "chrome")
                                           (str.to.re "android"))
                                 (re.* (re.range "\x00" "\xff"))))))
(let ((a!3 (str.in.re TestC0
                      (re.inter a!1 (re.++ (str.to.re "") (re.inter a!1 a!2))))))
  (=> a!3
      (= TestC0 (str.++ "" "" |33 Fill 3| |33 Fill 2| |33 Fill 4| |33 Fill 5|))))))
(assert (str.in.re |33 Fill 1|
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (str.in.re (str.++ "" "" |33 Fill 1|)
           (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))))
(assert (or (= |33 Fill 2| (str.++ "" "" |33 Fill 1|)) (= |33 Fill 2| "")))
(assert (=> (= |33 Fill 2| "") (= (str.++ |33 Fill 3| |33 Fill 2|) "")))
(assert (str.in.re |33 Fill 4| (str.to.re "safari")))
(assert (let ((a!1 (re.++ (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (str.to.re "safari"))))
  (str.in.re (str.++ "" "" |33 Fill 3| |33 Fill 2| |33 Fill 4|) a!1)))
(assert (= |33 Fill 6| (str.++ "" "" |33 Fill 3| |33 Fill 2| |33 Fill 4|)))
(assert (= |33 Fill 7| |33 Fill 2|))
}
